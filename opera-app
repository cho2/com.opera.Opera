#!/usr/bin/python3
#
# eos-google-chrome-app: launcher script to launch Google Chrome
#
# Copyright (C) 2016 Endless Mobile, Inc.
# Authors:
#  Mario Sanchez Prada <mario@endlessm.com>
#  Joaquim Rocha <jrocha@endlessm.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# opera-app: launcher script to launch Opera
# (C) 2018 Kukuh Syafaat <kukuh@syafaat.id>, modified for Opera
# For research and development purpose only
#
import logging
import os
import subprocess
import sys

def _running_inside_flatpak():
    runtime_dir = os.environ.get('XDG_RUNTIME_DIR')
    if not runtime_dir:
        return False
    return os.path.exists(os.path.join(runtime_dir, 'flatpak-info'))

# Verify if we're running inside Flatpak before we proceed with code that may fail due
# to that reason
if _running_inside_flatpak():
    logging.warning("Opera cannot be run inside a Flatpak sandboxed environment")
    sys.exit(0)

import gi
gi.require_version('Flatpak', '1.0')
from gi.repository import Flatpak
from gi.repository import GLib


def exit_with_error(message):
    logging.error(message)
    sys.exit(1)


def find_flatpak_ref(ref_id, kind=Flatpak.RefKind.APP, branch=None, arch=None):
    installations = [Flatpak.Installation.new_user()] + Flatpak.get_system_installations()
    ref_found = None

    for installation in installations:
        try:
            # We use get_current_installed_app() for apps since that will find
            # the current dir for the app regardless of what the branch, while
            # get_installed_ref() would force us to either specify it manually
            # or to rely on the defaults when passing 'None', which is 'master'.
            if kind == Flatpak.RefKind.APP and not branch:
                ref_found = installation.get_current_installed_app(ref_id, None)
            else:
                ref_found = installation.get_installed_ref(kind, ref_id, arch, branch, None)
            break
        except GLib.Error as e:
            logging.warning("Could not find Flatpak ref %s in %s: %s", ref_id,
                            installation.get_path().get_path(), repr(e))

    return ref_found


class OperaFlatpakLauncher:

    FLATPAK_OPERA_APP_ID = 'com.opera.Opera'

    def __init__(self, arch, params):
        self._params = params
        self._arch = arch
        self._start()

    def _start(self):
        app_info = self._get_opera_app_info()
        if app_info:
            logging.info("Local installation of Opera found. Launching...")
            self._run_opera(app_info, self._params)
        else:
            exit_with_error("Could not find any local installation of Opera")

    def _run_opera(self, app_info, params):
            # We'll be running Opera outside of flatpak's sandbox, meaning that flatpak
            # has no clue about that and could choose to update/remove the files during an
            # update of the application, which would be bad. To prevent that, we make sure
            # a sandboxed process for that app is running in parallel to Opera, keeping the
            # sandbox 'alive' after the main Opera process finishes, in which case we'll send
            # a flag (end of line character) via the stdin FD to let it know it can die now.
            try:
                sandbox_process = subprocess.Popen(['flatpak', 'run',
                                                    '--command=bash', self.FLATPAK_OPERA_APP_ID, '-c', 'read'],
                                                   stdin=subprocess.PIPE)
                logging.info("Running monitor process inside the sandbox with PID %d", sandbox_process.pid)
            except OSError as e:
                exit_with_error("Could not run sandbox process: {}".format(repr(e)))

            # Bundled data and libraries need to be taken also into account
            data_dirs = app_info['app_data_path']
            if 'XDG_DATA_DIRS' in os.environ:
                data_dirs = ':'.join((data_dirs, os.environ['XDG_DATA_DIRS']))
            os.environ['XDG_DATA_DIRS'] = data_dirs
            os.environ['LD_LIBRARY_PATH'] = app_info['app_lib_path']

            # Send an end of line byte string to make the read finish in
            # the sandboxing process, effectively terminating the process.
            sandbox_process.communicate(input=os.linesep.encode())
            logging.info("Sandbox process stopped")

    def _get_legacy_opera_runtime_path(self, app_path):
        runtime_extension_id = '{}.external'.format(self.FLATPAK_OPERA_APP_ID)
        try:
            metadata_file = GLib.KeyFile()
            metadata_file.load_from_file(os.path.join(app_path, 'metadata'), GLib.KeyFileFlags.NONE)

            keyfile_group = 'Extension {}'.format(runtime_extension_id)
            if not metadata_file.has_group(keyfile_group):
                exit_with_error("Flatpak metadata not referencing external runtime")

            runtime_version = metadata_file.get_string(keyfile_group, 'version')
            if not runtime_version:
                exit_with_error("Could not determine version of external runtime")
        except GLib.Error:
            exit_with_error("Could not read flatpak's metadata for Opera")

        runtime_path = None
        runtime = find_flatpak_ref(runtime_extension_id, Flatpak.RefKind.RUNTIME,
                                   runtime_version, self._arch)
        if runtime:
            runtime_path = runtime.get_deploy_dir()
            if not runtime_path or not os.path.exists(runtime_path):
                exit_with_error("Could not find Opera's external runtime directory")

            runtime_path = os.path.join(runtime_path, 'files')
            if not os.path.exists(runtime_path):
                exit_with_error("Could not find Opera's binaries in external runtime directory")
        else:
            exit_with_error("Could not find Opera's external runtime")

        return runtime_path

    def _get_opera_app_info(self):
        app_lib_path = None

        app = find_flatpak_ref(self.FLATPAK_OPERA_APP_ID)
        if not app:
            logging.info("Opera application is not installed")
            return None

        app_path = app.get_deploy_dir()
        if not app_path or not os.path.exists(app_path):
            exit_with_error("Could not find Opera's application directory")

        app_data_path = os.path.join(app_path, 'files/share')
        if not os.path.exists(app_data_path):
            exit_with_error("Could not find bundled data for Opera")

        app_lib_path = os.path.join(app_path, 'files/lib')
        if not os.path.exists(app_lib_path):
            exit_with_error("Could not find bundled libraries for Opera")

        opera_path = os.path.join(app_path, 'files', 'extra')
        # We check for legacy runtimes to maintain backward-compatibility for users without
        # support for native external apps (Flatpak <0.6.13)
        if not os.path.exists(opera_path):
            logging.warning("Could not find 'extra data' directory in Opera's Flatpak; falling "
                            "back to the legacy runtime...")
            opera_path = self._get_legacy_opera_runtime_path(app_path)

        app_info = {
            'app_data_path': app_data_path,
            'app_lib_path': app_lib_path,
            'opera_path': opera_path
        }
        logging.info("Found information for Opera: %s", repr(app_info))
        return app_info


if __name__ == '__main__':
    # Opera is only available for Intel 64-bit
    app_arch = Flatpak.get_default_arch()
    if app_arch != 'x86_64':
        exit_with_error("Found installation of unsupported architecture: {}".format(app_arch))

    # We must NOT run this script from inside flatpak's sandbox
    # or Opera's own sandbox will fail (it's a setuid executable).
    if os.path.exists(os.path.join(GLib.get_user_runtime_dir(), '.flatpak-info')):
        exit_with_error("This launcher can NOT be run from inside a flatpak sandbox")

    cmdline_args = sys.argv[1:]
    if len(sys.argv) > 1 and sys.argv[1] == '--debug':
        logging.basicConfig(level=logging.INFO)
        cmdline_args = sys.argv[2:]

    OperaFlatpakLauncher(app_arch, cmdline_args)
    sys.exit(0)
